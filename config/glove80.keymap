/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    tapping-term-ms = <160>;

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;
        };

        browser_select_td: tap_dance_browser_select {
            compatible = "zmk,behavior-tap-dance";
            label = "BROWSER_SELECT_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>; // Adjust if needed
            bindings = <&kp LA(LS(LC(LG(F))))>, <&kp LS(LC(LA(C)))>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        nmeth: nmeth {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp M>;
            label = "NMETH";
        };

        pmeth: pmeth {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp M>;
            label = "PMETH";
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp ESCAPE        &none   &none         &none             &none                                                                                                                             &none            &none              &none          &none     &none
&kp ESCAPE        &as N1  &as N2        &as N3            &as N4          &as N5                                                                                                    &as N6  &as N7           &as N8             &as N9         &as N0    &as MINUS
&kp GRAVE         &kp Q   &kp W         &kp E             &kp R           &kp T                                                                                                     &kp Y   &kp U            &kp I              &kp O          &kp P     &as EQUAL
&kp LEFT_CONTROL  &kp A   &kp S         &kp D             &kp F           &kp G                                                                                                     &kp H   &kp J            &kp K              &kp L          &as SEMI  &as SQT
&kp LEFT_SHIFT    &kp Z   &kp X         &kp C             &kp V           &kp B   &kp LEFT_COMMAND  &kp LEFT_CONTROL  &kp RIGHT_ALT   &kp RIGHT_ALT    &kp RIGHT_CONTROL  &kp RCMD  &kp N   &kp M            &as COMMA          &as DOT        &as FSLH  &as NON_US_BACKSLASH
&magic 3 0        &mo 1   &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT          &lt 1 TAB         &lt 2 SPACE       &kp LEFT_SHIFT  &kp RIGHT_SHIFT  &kp BACKSPACE      &kp RET           &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &as RIGHT_ALT  &kp HASH  &kp PG_DN
            >;
        };

        navshot {
            bindings = <
&trans  &trans  &trans  &trans         &trans                                                                                 &trans                 &trans                 &trans                 &trans                 &trans
&trans  &trans  &trans  &trans         &trans  &trans                                                  &trans                 &trans                 &kp LS(LC(LA(C)))      &trans                 &trans                 &trans
&trans  &trans  &trans  &trans         &trans  &trans                                                  &kp LS(LA(LC(LG(C))))  &kp LS(LA(LC(LG(T))))  &browser_select_td     &kp LS(LA(LC(LG(S))))  &kp LS(LC(LG(LA(M))))  &trans
&trans  &trans  &trans  &trans         &trans  &trans                                                  &kp LS(LA(LC(LG(O))))  &kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(W))))  &kp LS(LA(LC(LG(L))))  &trans
&trans  &trans  &trans  &kp LS(LG(C))  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LA(LC(LG(P))))  &trans                 &trans                 &trans                 &trans                 &trans
&trans  &trans  &trans  &trans         &trans          &trans  &trans  &trans  &trans  &trans  &trans                         &trans                 &trans                 &trans                 &trans                 &trans
            >;
        };

        movement {
            bindings = <
&none  &none  &none  &none                 &none                                                                                               &none            &none           &none          &none             &none
&none  &none  &none  &none                 &none                  &none                                                       &none            &none            &none           &none          &none             &none
&none  &none  &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HASH                                                    &kp LS(LC(TAB))  &kp LC(TAB)      &kp LG(LA(I))   &kp LS(LG(C))  &kp C_PLAY_PAUSE  &none
&none  &none  &none  &kp LEFT_BRACE        &kp RIGHT_BRACE        &mo 1                                                       &kp LEFT         &kp DOWN         &kp UP          &kp RIGHT      &kp K_PLAY_PAUSE  &none
&none  &none  &none  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none     &none  &none  &none  &none  &none          &none  &kp C_VOL_DN     &kp C_VOLUME_UP  &kp C_PREVIOUS  &kp C_NEXT     &none             &none
&none  &none  &none  &none                 &none                            &none  &none  &none  &none  &kp LG(SPACE)  &none                   &kp LG(Z)        &kp LG(LS(Z))   &none          &none             &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
